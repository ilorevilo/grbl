 defined in CONTROL_DDR:
 
 #define CONTROL_RESET_BIT 0 // Uno Analog Pin 0
 --> together with other control bits in CONTROL_MASK 
 
 in system_init() --> set as input:
CONTROL_DDR &= ~(CONTROL_MASK);

CONTROL_PCMSK |= CONTROL_MASK; // Enable specific pins of the Pin Change Interrupt
PCICR |= (1 << CONTROL_INT); // Enable Pin Change Interrupt
(#define CONTROL_INT PCIE1 // Pin change interrupt enable pin)
//PCIEx, PINx, PORTx, etc. are constants that are coded with the bit numbers for the particular register they belong to for the particular MCU you're compiling GCC against.

ISR(CONTROL_INT_vect)
(#define CONTROL_INT_vect PCINT1_vect)
PCINT1_vect fires when attached pins change (?)

-> ISR then checks which pin was pressed:

  uint8_t pin = system_control_get_state();
  if (pin) {
    if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) {
mc_reset();

system_control_get_state(): // Returns control pin state as a uint8 bitfield.
uint8_t system_control_get_state()
{
  uint8_t control_state = 0;
uint8_t pin = (CONTROL_PIN & CONTROL_MASK);

if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
(#define CONTROL_PIN_INDEX_RESET bit(1))

for CONTROL_RESET_BIT:
do mc_reset(); --> only action

---> remove control_reset_bit x
---> make other input port call mc_reset() when button pressed
